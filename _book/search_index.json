[["structured-query-language.html", "7 Structured Query Language 7.1 cleaning data 7.2 setting up a database 7.3 data visualization 7.4 Conclusions on the flu dataset 7.5 Conclusions on the dengue dataset 7.6 joining graphs 7.7 Conclusions after joining", " 7 Structured Query Language Structured Query Language (SQL), is a programming language which was creating for communicating with and editing databases. With the increasing usage of cloud storage and databases, the importance of SQL has become higher as the world got more automated. nearly all databases use SQL as their main programming. Because of the high usage, learning SQL is very relevant. I currently have a basic knowledge of how to use SQL to create a database and to add, edit and remove data from databases. On this page, I will demonstrate what I can all do with SQL and build a SQL database. For this, I used two files that contained the number of dengue fever cases and flu cases from 2002 till 2015. I will make a short analysis of the data sets. The general steps I took in this analysis are: Manual download of the Dengue Fever data set from the dsfb2 repository Manual download of the Flu Fever data set from the dsfb2 repository. Clean and tidy the data Write the data away in the folder data Make a SQL database of the data using RPostgreSQL Data visualization Conclusion 7.1 cleaning data After loading in the data, I inspected the data. The data from the gapminder dataset is shown in table 7.1 The data from the dengue data set is shown in table 7.2 The data from the flu data set is shown in table 7.3 Figure 7.1: data from gap minder dataset Figure 7.2: data from dengue dataset Figure 7.3: data from flu dataset The gapminder data set was already in tidy data format, and therefor did not need to be edited. The dengue and flu data set did require editing to make the tables tidy. To make later comparisons of the different data sets easier, the format of the flu and dengue data sets were changed to match the format of the gapminder data set. The changes made were: Put all countries in one column, and the cases to one column split the column Date to three columns named Year, Month and Day correct data classes The new tidy dengue table is shown in table 7.4 The new tidy flu table is shown in table 7.5 The new tables were stored as a .csv file and as a .rds file in the data folder Figure 7.4: tidy data from dengue dataset Figure 7.5: tidy data from flu dataset 7.2 setting up a database 7.2.1 exporting data to DBeaver the new tidy data files were exporting to DBeaver using Rpostgres: # the link to exporting files to DBeaver requires to fill in personal information such as a password, which is unique for all users. # this analysis is reproducible if you copy the code and insert your own local information. con &lt;- dbConnect(RPostgres::Postgres(), dbname = &quot;workflowsdb&quot;, host = &quot;localhost&quot;, port = &quot;5432&quot;, user = &quot;postgres&quot;, password = &quot;231mm1AM!&quot;) dbWriteTable(con, &quot;flu_tidy&quot;, flu_tidy) dbWriteTable(con, &quot;dengue_tidy&quot;, dengue_tidy) dbWriteTable(con, &quot;gapminder&quot;, gapminder) dbListTables(con) dbDisconnect(con) After checking both in R using the dbListTables(con) funcion, and in DBeaver, it was confimred that the data was imported properly. This can also be seen in the image bellow. inspecting if data was loaded into DBEAVER 7.2.2 SQL script In D beaver, the following script is written to further inspect the data SELECT dengue_cases, country FROM dengue_tidy order BY dengue_cases asc SELECT flu_cases, country FROM flu_tidy order BY flu_cases asc SELECT population, country FROM gapminder order BY population desc The images bellow further show the data loaded into DBeaver: inspecting if dengue fever data was loaded into DBEAVER inspecting if flu data was loaded into DBEAVER inspecting if gapminder data was loaded into DBEAVER After inspected the data in Dbeaver, the data was also still inspected in R using the dplyr package. Bellow the data from the dengue, flu and gapminder data set are shown respectively. It becomes visible that, the data in these tables are the same as the data that was loaded into DBeaver. This confirms that the data was exported properly. ## # A tibble: 6,590 x 5 ## Year Month Day Country dengue_cases ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2002 12 29 Argentina NA ## 2 2002 12 29 Bolivia 0.101 ## 3 2002 12 29 Brazil 0.073 ## 4 2002 12 29 India 0.062 ## 5 2002 12 29 Indonesia 0.101 ## 6 2002 12 29 Mexico NA ## 7 2002 12 29 Philippines NA ## 8 2002 12 29 Singapore 0.059 ## 9 2002 12 29 Thailand NA ## 10 2002 12 29 Venezuela NA ## # ... with 6,580 more rows ## # A tibble: 19,111 x 5 ## Year Month Day Country flu_cases ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; ## 1 2002 12 29 Argentina NA ## 2 2002 12 29 Australia NA ## 3 2002 12 29 Austria NA ## 4 2002 12 29 Belgium NA ## 5 2002 12 29 Bolivia NA ## 6 2002 12 29 Brazil 174 ## 7 2002 12 29 Bulgaria NA ## 8 2002 12 29 Canada NA ## 9 2002 12 29 Chile NA ## 10 2002 12 29 France NA ## # ... with 19,101 more rows ## # A tibble: 10,545 x 9 ## country year infan~1 life_~2 ferti~3 popul~4 gdp conti~5 region ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Albania 1960 115. 62.9 6.19 1.64e6 NA Europe South~ ## 2 Algeria 1960 148. 47.5 7.65 1.11e7 1.38e10 Africa North~ ## 3 Angola 1960 208 36.0 7.32 5.27e6 NA Africa Middl~ ## 4 Antigua and Ba~ 1960 NA 63.0 4.43 5.47e4 NA Americ~ Carib~ ## 5 Argentina 1960 59.9 65.4 3.11 2.06e7 1.08e11 Americ~ South~ ## 6 Armenia 1960 NA 66.9 4.55 1.87e6 NA Asia Weste~ ## 7 Aruba 1960 NA 65.7 4.82 5.42e4 NA Americ~ Carib~ ## 8 Australia 1960 20.3 70.9 3.45 1.03e7 9.67e10 Oceania Austr~ ## 9 Austria 1960 37.3 68.8 2.7 7.07e6 5.24e10 Europe Weste~ ## 10 Azerbaijan 1960 NA 61.3 5.57 3.90e6 NA Asia Weste~ ## # ... with 10,535 more rows, and abbreviated variable names ## # 1: infant_mortality, 2: life_expectancy, 3: fertility, 4: population, ## # 5: continent The file from the gapminder dataset still contained a lot of additional information from additional years, that was not included in the flu and dengue fever data set. Therefor, 7.6 was created. Figure 7.6: tidy data from gapminder dataset 7.2.3 importing data from DBeaver after exporting the data from Rstudio to DBeaver, the data was imported back from DBeaver to Rstudio with the following script: # import the data into R after inspecting the data in DBeaver gapminder &lt;- dbReadTable(con, &quot;gapminder&quot;) dengue &lt;- dbReadTable(con, &quot;dengue_tidy&quot;) flu &lt;- dbReadTable(con, &quot;flu_tidy&quot;) 7.3 data visualization The data will now be visualized to check if the flu or dengue fever is more prevalent in certain areas. The data from the flu dataset is shown in figure 7.7 The data from the dengue dataset is shown in figure 7.8 Figure 7.7: first graph from flu dataset, sorted by country Figure 7.8: first graph from dengue dataset, sorted by country 7.4 Conclusions on the flu dataset When considering the number of flu cases globally as shown in figure 7.7, it becomes visible that the highest occurrence of the flu is in Spain, followed by Canada and the United States. The lowest flu occurrences on the other hand are found in Sweden, followed by Chile and New Zealand. The reason for this is partciular spread of flu cases is unknown. To establish significance its possible to still run additional statistical testing, and to possibly research more metadata. 7.5 Conclusions on the dengue dataset When looking at figure 7.8, its visible that the highest number of dengue cases are seen in Venezuele, followed by Indonesia and Brazil. Dengue fever develops after infection with the Flaviviridae virus carried by mosquitoes. These mosquitoes are more prevalent in countries with warmer climates, which might explain the spread of occurrences that is vissible within the graph. 7.6 joining graphs To be able to better compare the two occurances of flu and dengue fever, the 2 plots will be joined together as is shown in figure 7.9 Figure 7.9: flu and dengue fever graphs joined together 7.7 Conclusions after joining Joining the data set provides us with a singular object that contains data on all three diseases. This helps put things in perspective, however in figure 7.7, 7.8 and 7.9, the conclusions previously drawn remains the same. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
